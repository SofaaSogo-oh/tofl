(load "cwd-hh")

(let ((table (make-hash-table :test 'eql)))
  (setf (gethash 11 table) t)
  (setf (gethash 8 table) t)
  (setf (gethash 5 table) t)
  (print-set table))

(defparameter *grammar1*
  (concatenate 'string
    "S_9 \to S_1|S_2         & S_{11} \to S_5|S_6            \\"
    "S_1 \to S_{15}a|a       & S_5 \to S_{16}b|S_{15}b       \\"
    "S_2 \to S_{15}b|b       & S_6 \to S_{16}c|S_{15}c       \\"
    "S_{10} \to S_3|S_4      & S_{12} \to S_7|S_8            \\"
    "S_3 \to S_9a            & S_7 \to S_{11}b               \\"
    "S_4 \to S_9b            & S_8 \to S_{11}c               \\"
    "S_{15} \to S_{10}       & S_{16} \to S_{12}|\varepsilon \\"))

(defparameter *grammar2*
 (concatenate 'string
    "S_9 \to S_1|S_2         & S_{11} \to S_5|S_6            \\"
    "S_1 \to aS_{10}         & S_5 \to bS_{12}               \\"
    "S_2 \to bS_{10}         & S_6 \to cS_{12}               \\"
    "S_{10} \to S_3|S_4      & S_{12} \to S_7|S_8            \\"
    "S_3 \to aS_{15}|aS_{16} & S_7 \to bS_{16}|b             \\"
    "S_4 \to bS_{15}|bS_{16} & S_8 \to cS_{16}|c             \\"
    "S_{15} \to S_9        & S_{16} \to S_{11}|\varepsilon \\"))

;;;;;;;;;;;;
(progn "direct/reverse graph define"
  (defparameter *reverse-graph1* (extract-revers-graph *grammar1*))
  (defparameter *reverse-graph2* (extract-revers-graph *grammar2*))
  (defparameter *direct-graph1* (extract-direct-graph *grammar1*))
  (defparameter *direct-graph2* (extract-direct-graph *grammar2*)))

(print-graph *reverse-graph2*)

(get-line *reverse-graph1* (read))
(get-line *reverse-graph2* (read))
(merge-cbr (read-line) (read-line))

(defun gen-C (init graph &key (init-inx 0))
  (labels ((iter (line inx)
            (let ((cur1 (c-step-1 graph line))
                  (cur2 (c-step-2 graph line))
                  (inx1 (1+ inx)))
              (format t 
                "C_{~a} & = \\cbr{~a} \\cup C_{~a} = \\cbr{~a}\\\\~%"
                inx1
                (list-to-cbr cur1) 
                inx
                cur2)
              (unless (equal line cur2)
                (iter cur2 inx1)))))
          (iter init init-inx)))

(gen-C (read-line) *reverse-graph1* :init-inx 1)
(gen-C (read-line) *reverse-graph2* :init-inx 1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(gen-C (read-line) *direct-graph1*)
(print-graph *direct-graph1*)
(print-graph *direct-graph2*)
(gen-C (read-line) *direct-graph2*)
